#! /bin/sh

set -e
umask 022

PATH=$PATH:/usr/sbin:/sbin

packagingdir="$(pwd)"
bamboodir=$(pwd)/bamboo-scripts
topdir=$(pwd)
tmppath=$(pwd)/tmp
testoutdir=$(pwd)/test-results
lrms="fork"
chmod a+x make-packages.pl fait_accompli/installer.sh gpt/build_gpt gpt/make_gpt_dist gpt/setup_gpt_dist gpt/packaging_tools/bootstrap gpt/check-gpt-prereqs

chroot=""
in_chroot=0
test_from_bamboo=0
tag=""

arch="$(dpkg-architecture -qDEB_BUILD_GNU_CPU)"
case "$arch" in
    x86_64|ia64)
        flavor=gcc64
        ;;
    i?86)
        flavor=gcc32
        ;;
    *)
        echo "Don't know how to determine flavor for $arch" 1>&2
        exit 1
        ;;
esac
while getopts "ic:r:a:l:bt:q" i; do
    case "$i" in
        i)
            in_chroot=1
            ;;
        c)
            chroot="$OPTARG"
            chroot_args="${chroot_args:+"$chroot_args "}-i"
            ;;
        r)
            repopkg_url="$OPTARG"
            chroot_args="${chroot_args:+"$chroot_args "}-r ${OPTARG}"
            ;;
        a)
            artifact_url="$OPTARG"
            chroot_args="${chroot_args:+"$chroot_args "}-a ${OPTARG}"
            ;;
        l)
            lrms="$lrms $OPTARG"
            ;;
        t)
            tag="$OPTARG"
            chroot_args="${chroot_args:+"$chroot_args "}-t $OPTARG"
            ;;
        b)
            test_from_bamboo=1
            chroot_args="${chroot_args:+"$chroot_args "}-b"
            ;;
        q)
            quick=1
            chroot_args="${chroot_args:+"$chroot_args "}-q"
            ;;
    esac
done
shift $(($OPTIND - 1))

if [ "$repopkg_url" = "" -o "$artifact_url" = "" ]; then
    echo "Usage: $0 -r REPO-PACKAGE-URL -a ARTIFACT-URL [-c CHROOT] [-l LRM]..." 1>&2
    exit 1
fi

mkdir -p $topdir
mkdir -p $testoutdir

# Reset home to this directory as it is a transient bamboo build dir

mkdir -p $tmppath

# Remove all globus-related packages prior to testing
pkgs_to_rm="$( dpkg-query -W -f "\${Package}\t\${Status}\n" "*globus*" "grid-packaging-tools*" "myproxy*" "gsi-openssh*" | awk -F"	" "\$2 ~ /^install/ { print \$1 }" || true)"
if [ -n "$pkgs_to_rm" ]; then
    sudo dpkg -P $pkgs_to_rm
fi

if [ "$quick" != 1 ]; then
# Create source packages for the tests
    if [ "$in_chroot" != 1 ]; then
        ./make-packages.pl ${tag:+-t "$tag"} -a --deps -deporder -bundles=globus-data-management-test,globus-resource-management-test \
            -flavor=${flavor} -skipbundle
    fi
fi

if [ "$chroot" != "" ]; then
    schroot -c "$chroot" -d "$packagingdir" -p -- bash -x $0 $chroot_args
fi
    
# Download and install the repo definition package
mkdir -p "$flavor"
if [ "$test_from_bamboo" = 1 ]; then
    cat <<EOF > globus-bamboo.list
deb ${artifact_url}/repo $(lsb_release -cs) contrib
deb-src ${artifact_url}/repo $(lsb_release -cs) contrib
EOF
    sudo cp globus-bamboo.list /etc/apt/sources.list.d/globus-bamboo.list
    remove_repo=/etc/apt/sources.list.d/globus-bamboo.list
    sudo apt-key add - <<EOF
-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG v1.4.5 (GNU/Linux)

mQGiBE0PXQkRBAC12PfwFzMyTKAvCp3AEbzdwwDyEaBHYmd1+Dv+q5c48fEZQrzA
PuZ75BnG8BRIo3ZSYJll9Xf5v8A0M6F35msBBdjUpI+PHZvSQ+yru6U3w9XCsmO9
jSGWM1XAw/hcDWOsETOsjJ56AqIKndOXtG2jeOMFD0MwJus9paDcv5pPkwCgk3Fk
I+GdLaZf0O6vGUtq2Fo2EgkD/14AQ4SyUufwztQeLwlYXyihdUoIVBl4wm4fndJb
TuzTlp3V/oabM8t+V92ftbqlAesFb1FdFQ9NeUEY0VIODR2OTsmEfLUSMK/kRfXM
4FatObXpEp58EydZb3oz/vwASEk1Nno5OW2noGZL3sCk+3j65MstI2q4kMvNSvl+
JEjUBACgNv/mDrn0UjWBuzxOuZrh1r2rBdsjIHx31o/vBF5YLfQhErZQTm6cfpRK
W32Nm18btrqgxxHFAMb4wxnVxAxdM3zLSAaiqvi33z2wHReh5TfaVKpJBj7LpMSI
hwu50iovsBjE7HiusJQBWBtk8Bqp4g9ic2sPV0caEMCUXU5R9bQjR2xvYnVzIFRv
b2xraXQgPHN1cHBvcnRAZ2xvYnVzLm9yZz6IYAQTEQIAIAUCTQ9dCQIbAwYLCQgH
AwIEFQIIAwQWAgMBAh4BAheAAAoJEESufsL68kNlb6IAoIemS8dr65xCkA4GQzgJ
ngXwZgtvAKCOKs5Ork6HiNKIrWRGMLvA7iktBbkCDQRND10SEAgA37cRQGj/QNcc
OjyBrL6e2wPT7UtpXBEHzfjhtmT8+VC+PSbKRxVfawLBtrfzSAAwsmye3c+XK/VB
Pa06vSSmezeyNau+XtEVLwrwQwO/kM6wgNtb7zYyI67Y6XEPP+ZlqpZ0W14cTZBD
3SXWuu6zqjdtUnJCg/j/j0zH5TZa40aCfisERxNCQeoePk2gmMTJDJF0ASM3Nhys
QIP9qpCA+eOJnKmMeEgDCW9j2mYO4tp9lCSbi15HAb41HKN6xypNWk+EHKyu9n50
88UocRHXLZFujzNTGIokWAcoC0D3qpVQehtAVgt1VPrE6MxFPek8ZN4Ho++92KB7
F6E0OsfF6wADBggAnNPguzYAIztF/EzZANUU/7Eon9zJaD4Lf/mnhB3bMuGvenY0
7HSBAXbUxVXs7uX3S6u9PZ9dytl2Fqh8w47TNcC0ACKLRnhxTJ92LLakzAGVGtNz
2W9l+YJaZ6qIQR9FmYpCyIWp6Vm47yOARThrMtnwUhb53g5ZfxgzpHNUDN/7utTy
3sUaMRiijecmSVhDFbrz7ryY2Btlcr7ZrBo0ODHohDkZVn2UrzE6qg9g5np03zYe
5OUM5Lt5GYZJSKZO81aJ5+9DlkiAev3BFEeCsSOwjrqLZpsr0olbIfeHCi8pvjOJ
SCfx4Qs/hI34ykaUn3AgbgxqT0mSKfMasg2bIIhJBBgRAgAJBQJND10SAhsMAAoJ
EESufsL68kNlBuAAnRRI5jFAvyjtQaoQpVqSL4/O45D7AJ9WrW/vxTzN0OyZyUU6
8T0dJyXArA==
=r6rU
-----END PGP PUBLIC KEY BLOCK-----
EOF
    cat >> globus.pref <<EOF
Package: *
Pin: origin gtbamboo.dyndns.org
Pin-Priority: 600
EOF
    sudo cp globus.pref /etc/apt/preferences.d/globus.pref
    remove_prefs=/etc/apt/preferences.d/globus.pref
else
    curl -s "$repopkg_url" > "${flavor}/${repopkg_url##*/}"
    sudo dpkg -i "${flavor}/${repopkg_url##*/}"
fi
sudo aptitude -y -o Acquire::PDiffs=false update
sudo mkdir -p /etc/grid-security/certificates

# Install the binaries that we will test
sudo aptitude -y install $(curl -s "${artifact_url}/all-packages/all-packages" | sed -e /globus-repository/d -e "s/_.*//" | grep -Ev 'globus-gram-job-manager-fork-setup-seg|globus-gram-job-manager-condor|globus-gram-job-manager-pbs|globus-gram-job-manager-lsf|globus-gram-job-manager-sge' | sort -u)

SIMPLE_CA_DIR="$topdir/bamboo-simple-ca"

# Check to see if there's a simpleCA available in $SIMPLE_CA_DIR
if [ ! -d "$SIMPLE_CA_DIR" ]; then
    grid-ca-create -force -noint -pass globus -dir "$SIMPLE_CA_DIR"
    cd "$SIMPLE_CA_DIR"
    grid-ca-package -d -cadir "$SIMPLE_CA_DIR"
    cd "$OLDPWD"
fi

SIMPLE_CA_PACKAGE="$(ls -1 "$SIMPLE_CA_DIR"/*.deb)"
SIMPLE_CA_HASH="$(grid-cert-info -issuerhash -f "$SIMPLE_CA_DIR"/cacert.pem)"

remove_default_ca="no"
if [ -f "$SIMPLE_CA_PACKAGE" ]; then
    sudo dpkg -i "$SIMPLE_CA_PACKAGE"
    if [ ! -r /etc/grid-security/grid-security.conf ]; then
        sudo grid-default-ca -ca "$SIMPLE_CA_HASH"
        remove_default_ca="yes"
    fi
fi

TEST_CRED_DIR="$topdir/testcreds"
TEST_HOST_CERT="$TEST_CRED_DIR/hostcert.pem"
TEST_HOST_CERTREQ="$TEST_CRED_DIR/hostcert_request.pem"
TEST_HOST_KEY="$TEST_CRED_DIR/hostkey.pem"

TEST_USER_CERT="$TEST_CRED_DIR/usercert.pem"
TEST_USER_CERTREQ="$TEST_CRED_DIR/usercert_request.pem"
TEST_USER_KEY="$TEST_CRED_DIR/userkey.pem"

if [ ! -f "$TEST_HOST_CERT" ]; then
    grid-cert-request -host "$(hostname -f)" -dir "$TEST_CRED_DIR" -ca "$SIMPLE_CA_HASH"
    grid-ca-sign -dir "$SIMPLE_CA_DIR" -in "$TEST_HOST_CERTREQ" -out "$TEST_HOST_CERT" -passin pass:globus -force
fi

if [ ! -f "$TEST_USER_CERT" ]; then
    grid-cert-request -cn "$(id -un)" -dir "$TEST_CRED_DIR" -ca "$SIMPLE_CA_HASH" -nopw
    grid-ca-sign -dir "$SIMPLE_CA_DIR" -in "$TEST_USER_CERTREQ" -out "$TEST_USER_CERT" -passin pass:globus -force
fi

remove_hostcert="no"
mkdir -p /etc/grid-security
if [ ! -f "/etc/grid-security/hostcert.pem" ]; then
    sudo cp "$TEST_HOST_CERT" "$TEST_HOST_KEY" /etc/grid-security/
    remove_hostcert="yes"
fi

X509_USER_CERT="$TEST_USER_CERT"
X509_USER_KEY="$TEST_USER_KEY"
export X509_USER_CERT
export X509_USER_KEY

sudo grid-mapfile-add-entry -dn "$(grid-cert-info -subject -file "$X509_USER_CERT")" -ln "$(id -un)"

if which invoke-rc.d > /dev/null 2>&1 ; then
    sudo invoke-rc.d globus-gridftp-server restart || true
else
    sudo /etc/init.d/globus-gridftp-server restart || true
fi

if which invoke-rc.d > /dev/null 2>&1; then
    sudo invoke-rc.d globus-gatekeeper restart || true
    sudo invoke-rc.d globus-scheduler-event-generator restart || true
else
    sudo /etc/init.d/globus-gatekeeper restart || true
    sudo /etc/init.d/globus-scheduler-event-generator restart || true
fi

grid-proxy-init -hours 24

mkdir -p "$tmppath/$flavor"
cd "$tmppath/$flavor"

flavortestoutdir="${testoutdir}/${flavor}"

mkdir -p "${flavortestoutdir}"

host_dn="$(grid-cert-info -subject -file /etc/grid-security/hostcert.pem)"
for testpkg in $topdir/package-output/globus*_test-*.tar.gz; do
    gzip -dc "$testpkg" | tar xf -
    testpkgname=$( basename $testpkg | sed -e 's/\.tar\.gz//' )
    cd $testpkgname
    testpkgname_no_ver=$(echo $testpkgname | sed -e 's/-.*//' -e 's/_/-/g')
    ./configure --with-flavor=${flavor}
    make
    if [ "${testpkgname_no_ver}" = "globus-gram-job-manager-test" ]; then
        sudo apt-get -y remove globus-gram-job-manager-fork globus-gram-job-manager-fork-setup-poll
        for lrm in $lrms; do
            if [ "${lrm}" = "condor" ]; then
                modes="none"
            else
                modes="-setup-poll -setup-seg"
            fi

            for mode in $modes; do
                if [ $mode = none ]; then
                    mode=""
                    servicename="jobmanager-$lrm"
                elif [ "$mode" = "-setup-poll" ]; then
                    servicename="jobmanager-$lrm-poll"
                elif [ "$mode" = "-setup-seg" ]; then
                    servicename="jobmanager-$lrm-seg"
                fi
                sudo apt-get -y install globus-gram-job-manager-$lrm$mode || continue
                if which invoke-rc.d > /dev/null 2>&1; then
                    sudo invoke-rc.d globus-gatekeeper restart
                    sudo invoke-rc.d globus-scheduler-event-generator restart || true
                else
                    sudo /etc/init.d/globus-gatekeeper restart || true
                    sudo /etc/init.d/globus-scheduler-event-generator restart || true
                fi
                # Allow multiple processes per node if the nodes are
                # multi-cpu
                if [ "$lrm" = "pbs" ]; then
                    sudo ed /etc/globus/globus-pbs.conf <<-EOF
			/^cpu_per_node=/s/=.*/="$(grep -c processor /proc/cpuinfo)"/
			w
			q
			EOF
                fi
                CONTACT_STRING="$(globus-hostname)/$servicename:$host_dn" 
                export CONTACT_STRING
                export CONTACT_LRM="$lrm"
                pids="$( ps -u $(id -un) -o pid,args | grep '[g]lobus-job-manager' | cut -d' ' -f1 || true)"
                if [ "$pids" != "" ]; then
                    kill $pids
                fi
                #killall globus-job-manager
                rm -rf ~/.globus/job
                rm -rf /var/lib/globus/gram_job_state/bamboo/*
                rm -f /var/lib/globus/gram_job_state/job.*
                rm -rf ~/.globus/.gass_cache
                make junit || true
                unset CONTACT_STRING
                unset CONTACT_LRM
                sudo apt-get -y remove globus-gram-job-manager-$lrm$mode
                # Stop the job manager and remove all job state, so that
                # tests will have a clean state
                xmlfile="${testpkgname_no_ver}-$lrm.xml"
                if [ -f "$xmlfile" ]; then
                    sed -e "s/<testsuite name=\"\([^\"]*\)\" /<testsuite name=\"\1_${flavor}-$lrm$mode\" /" -e "s/classname=\"\([^\"]*\)\"/classname=\"\1_${flavor}-$lrm$mode\"/"< "$xmlfile" > "${flavortestoutdir}/${xmlfile%%.*}$mode.xml"
                        mv "$xmlfile" "${xmlfile%%.*}$mode.xml"
                fi
            done
        done
        sudo apt-get -y install globus-gram-job-manager-fork globus-gram-job-manager-fork-setup-poll
        if which invoke-rc.d > /dev/null 2>&1; then
            sudo invoke-rc.d globus-gatekeeper restart
            sudo invoke-rc.d globus-scheduler-event-generator restart || true
        else
            sudo /etc/init.d/globus-gatekeeper restart || true
            sudo /etc/init.d/globus-scheduler-event-generator restart || true
        fi
    else
        dn="$(grid-cert-info -subject -file /etc/grid-security/hostcert.pem)"
        export CONTACT_STRING="$(globus-hostname)/jobmanager-fork-poll:$dn" 
        make junit || true
        for x in "${testpkgname_no_ver}"*.xml; do
            if [ -f "$x" ]; then
                sed -e "s/<testsuite name=\"\([^\"]*\)\" /<testsuite name=\"\1_${flavor}\" /" -e "s/classname=\"\([^\"]*\)\"/classname=\"\1_${flavor}\"/"< "$x" > "${flavortestoutdir}/${x}"
            fi
        done
    fi
    cd ..
done

pids="$( ps -u $(id -un) -o pid,args | grep '[g]lobus-job-manager' | cut -d' ' -f1 || true)"
if [ "$pids" != "" ]; then
    kill $pids
fi

if which invoke-rc.d > /dev/null 2>&1 ; then
    sudo invoke-rc.d globus-gridftp-server stop || true
else
    sudo /etc/init.d/globus-gridftp-server stop || true
fi

if which invoke-rc.d > /dev/null 2>&1; then
    sudo invoke-rc.d globus-gatekeeper stop || true
    sudo invoke-rc.d globus-scheduler-event-generator stop || true
else
    sudo /etc/init.d/globus-gatekeeper restart || true
    sudo /etc/init.d/globus-scheduler-event-generator stop || true
fi

# Remove test credential
sudo grid-mapfile-delete-entry -dn "$(grid-cert-info -subject -file "$X509_USER_CERT")" -ln "$(id -un)"
rm -f "/tmp/x509up_u$(id -u)"

# Remove test host credentials
if [ "$remove_hostcert" = "yes" ]; then
    sudo rm -f "/etc/grid-security/hostcert.pem"
    sudo rm -f "/etc/grid-security/hostkey.pem"
fi

if [ "$remove_default_ca" = "yes" ]; then
    sudo rm -f /etc/grid-security/globus-host-ssl.conf /etc/grid-security/globus-user-ssl.conf /etc/grid-security/grid-security.conf
fi

# Remove simple ca
sudo dpkg -P globus-simple-ca-$SIMPLE_CA_HASH

# Remove all globus-related packages after testing
pkgs_to_rm="$( dpkg-query -W -f "\${Package}\t\${Status}\n" "*globus*" "grid-packaging-tools*" "myproxy*" "gsi-openssh*" | awk -F"	" "\$2 ~ /^install/ { print \$1 }" || true)"
if [ -n "$pkgs_to_rm" ]; then
    sudo dpkg -P $pkgs_to_rm
fi

if [ "$remove_repo" != "" ]; then
    sudo rm "$remove_repo"
fi

if [ "$remove_prefs" != "" ]; then
    sudo rm "$remove_prefs"
fi
