#! /bin/sh

set -e
umask 022

topdir=$(pwd)/rpmbuild
tmppath=$(pwd)/tmp

args=$(getopt n:v:)
set -- ${args}

for i; do
    case "$i" in
        -n)
            osname="$2"
            shift
            ;;
        -v)
            osver="$2"
            shift
            ;;
        --)
            shift
            break
            ;;
    esac
done

if [ "$osname" = "" -o "$osver" = "" ]; then
    echo "Usage: $0 -n OSNAME -v OSVER" 1>&2
    exit 1
fi

# Copy GPG keyring to $topdir
cp -R $HOME/.gnupg $topdir/.gnupg

# Reset home to this directory as it is a transient bamboo build dir
HOME=$topdir

mkdir -p $tmppath
for x in BUILD  BUILDROOT  RPMS  SPECS  SRPMS; do
    mkdir -p $topdir/$x
done

# Fedora 13
# enable build of 32-bit executables on 64-bit linux (if compilers are present)
# /usr/lib/rpm/config defines this with -march=i686 but no -m32, so the build
# fails (trying to build a 64-bit i686 executable)
cat <<EOF >> $topdir/.rpmrc
optflags: i686 -O2 -g -m32 -march=i686 -mtune=generic -fasynchronous-unwind-tables
EOF

target32=i686-redhat-linux

if egrep 'CentOS|Scientific Linux|Red Hat Enterprise Linux' /etc/redhat-release; then
    target32=i386-redhat-linux
    echo "%rhel                  5" >> $topdir/.rpmmacros
fi

# Enable building of RPM packages in $topdir
cat <<EOF >> $topdir/.rpmmacros
%_topdir               $topdir
%_tmppath              $tmppath
# Override this, as it breaks documentation dependencies in some of the builds 
%_excludedocs 0
%_signature gpg
%_gpg_name Globus
EOF

# Remove everything prior to building
pkgs_to_rm="$(rpm -qa | (egrep '^grid-packaging-tools|^globus-' || true) )"
if [ -n "$pkgs_to_rm" ]; then
    sudo rpm -e --allmatches $pkgs_to_rm
fi

bundles=globus-data-management-server,globus-data-management-client,globus-data-management-sdk 
chmod a+x make-packages.pl fait_accompli/installer.sh gpt/build_gpt gpt/make_gpt_dist gpt/setup_gpt_dist gpt/packaging_tools/bootstrap gpt/packaging_tools/configure gpt/check-gpt-prereqs

packages="$(./make-packages.pl -a -lp -deps -deporder -bundles=$bundles | \
    awk "/at version/ { gsub(/_/, \"-\", \$1); print \$1 }")"

./make-packages.pl -a -deps -deporder -bundles=$bundles -a -flavor=gcc64dbg
cd gpt-3.3/packaging_tools
make dist
cp gpt-3.3.tar.gz ../../package-output
cd ../../package-output

# Some gpt packages are in the bundles but not packaged yet. We'll ignore
# errors trying to generate srpms from those with || true below
for i in *.tar.gz; do rpmbuild -ts --nodeps $i || true; done
for i in grid-packaging-tools $packages; do
    if test -f $topdir/SRPMS/$i-[0-9]*.rpm; then
        rpmbuild --sign --rebuild $topdir/SRPMS/$i-[0-9]*src.rpm
        rpmsdir=$topdir/RPMS

        rpms="$(find $rpmsdir -name "$i-[0-9]*rpm" -o \
                             -name "$i-progs-[0-9]*rpm" -o \
                             -name "$i-devel-[0-9]*rpm" -o \
                             -name "$i-doc-[0-9]*rpm")"
        
        sudo rpm -Uvh $rpms;
    fi
done

# Move rpms out of the way so that find can work when installing.
cd $topdir
mv RPMS RPMS.x86_64
mkdir RPMS

pkgs_to_rm="$(rpm -qa | (egrep '^grid-packaging-tools|^globus-' || true) )"
if [ -n "$pkgs_to_rm" ]; then
    sudo rpm -e $pkgs_to_rm
fi
for i in grid-packaging-tools $packages; do
    if test -f $topdir/SRPMS/$i-[0-9]*.rpm; then
        rpmbuild --sign --target $target32 \
                 --rebuild $topdir/SRPMS/$i-[0-9]*src.rpm
        rpmsdir=$topdir/RPMS

        rpms="$(find $rpmsdir -name "$i-[0-9]*rpm" -o \
                             -name "$i-progs-[0-9]*rpm" -o \
                             -name "$i-devel-[0-9]*rpm" -o \
                             -name "$i-doc-[0-9]*rpm")"
        
        sudo rpm -Uvh $rpms;
    fi
done

cd $topdir
mv RPMS.x86_64/x86_64 RPMS

reporoot="${topdir}/repo"
repodir="${reporoot}/${osname}/${osver}"
# Generate YUM repository
mkdir -p "${repodir}"
cp -R RPMS/* "${repodir}"
cp -R SRPMS "${repodir}"

createrepo "${reporoot}"
