#! /bin/sh

set -e

usage()
{
    echo "Usage: $0 [-a ARTIFACTROOT] [-S] [-t TAG]"
}

get_package_filenames()
{
    pkgdir="$1"
    shift

    cd "$pkgdir"
    for i; do
        ls -1 "${i}"_*.deb
    done
    cd "$OLDPWD"
}
umask 022

PATH=$PATH:/usr/sbin:/sbin
orighome=$HOME
packagingdir="$(pwd)"
bamboodir=$(pwd)/bamboo-scripts
debiandir=$(pwd)/debian
topdir="$(pwd)/debbuild"
releasename=""
tmppath=$(pwd)/tmp

sign=1
quick=0
tag=""
flavor=unset
osname="$(lsb_release -is | tr '[[:upper:]]' '[[:lower:]]')"
osver="$(lsb_release -rs)"
releasename="$(lsb_release -cs)"
chroot=""
in_chroot=0
chroot_args=""
binaryonly=""
cvsroot=""

while getopts C:ibc:n:v:R:a:St:hg:f:q i; do
    case "$i" in
        i)
           in_chroot=1
           ;;
        b)
            binaryonly=1
            chroot_args="${chroot_args:+$chroot_args}-b"
           ;;
        C)
            cvsroot="$OPTARG"
            chroot_args="${chroot_args:+$chroot_args }-C $OPTARG"
            ;;

        c)
            chroot="$OPTARG"
            chroot_args="${chroot_args:+$chroot_args }-i"
            ;;
	S)
	    sign=0 
            chroot_args="${chroot_args:+$chroot_args }-S"
	    ;;
        t)
            tag="$OPTARG"
            chroot_args="${chroot_args:+$chroot_args }-t $OPTARG"
            ;;
        h)
            usage
            exit 0
            ;;
	f)
            flavor="$OPTARG"
            ;;
	q)
           quick=1
            chroot_args="${chroot_args:+$chroot_args }-q"
           ;;
    esac
done

if [ $in_chroot -eq 0 ]; then
    if [ -d "${topdir}.old" ]; then
        rm -rf "${topdir}.old"
    fi
    if [ -d "${topdir}" ]; then
        mv "${topdir}" "${topdir}.old"
    fi
    mkdir -p "$topdir"
fi

if [ "$sign" = 1 ]; then
    # Copy GPG keyring to $topdir
    cp -R $HOME/.gnupg $topdir/.gnupg
fi

if [ "$flavor" = "unset" ]; then
    debarch=$(dpkg-architecture -qDEB_BUILD_ARCH) 
    case $debarch in
	amd64|ia64)
	    flavor=gcc64
	    ;;
	i?86)
	    flavor=gcc32
	    ;;
	*)
	    echo "Don't know flavor for architecture ${debarch}, use -f FLAVOR" 1>&2
	    exit 1
	    ;;
    esac
fi

# Reset home to this directory as it is a transient bamboo build dir
HOME=$topdir

# Remove everything prior to building
pkgs_to_rm="$(dpkg-query -W -f="\${Package}\t\${Status}\n" '*globus*' 'grid-packaging*' '*myproxy*' 'gsi-openssh*' | awk -F"	" "\$2 ~ /^install/ { print \$1 }" || true)"
if [ -n "$pkgs_to_rm" ]; then
    sudo dpkg -r $pkgs_to_rm
fi

if [ "$cvsroot" != "" ]; then
    CVSROOT="$cvsroot"
    export CVSROOT
    anonflag=""
else
    anonflag="-a"
fi
packages="$(cat packages-list.txt | sed -e 's/-.*//')"

metapackages="globus-gridftp
    globus-data-management-client
    globus-data-management-server
    globus-data-management-sdk
    globus-gram5
    globus-resource-management-server
    globus-resource-management-client
    globus-resource-management-sdk
    globus-gsi"

cd $topdir

if [ "$chroot" != "" ]; then
    HOME="$orighome"
    schroot -c "$chroot" -d "$packagingdir" -p -- bash -xe $0 $chroot_args 
    HOME="$topdir"
    if [ -d "${topdir}-${chroot}" ]; then
        if [ -d "${topdir}-${chroot}.old" ]; then
            rm -rf "${topdir}-${chroot}.old"
        fi
        mv "${topdir}-${chroot}" "${topdir}-${chroot}.old"
    fi
    mv "${topdir}" "${topdir}-${chroot}"
    mkdir -p "${topdir}"
    cp -R "${orighome}/.gnupg" "${topdir}/.gnupg"
    cd "${topdir}"
fi

for i in grid_packaging_tools $packages; do
    debname="$(echo "$i" | tr _ -)"
    if [ ! -d "$debiandir/$debname" ]; then
        echo "Skipping $debname---no debian metadata"
        continue
    fi
    striplevel=1
    debout="$(awk -F: '/^Package: / { gsub("[ \t\r]", "", $2); print $2 }' "$debiandir/$debname/debian/control")"
    pkgversion="$(sed -ne "s,.*(,," -e "s,).*,," -e "s,-.*,," -e p -e q < "$debiandir/$debname/debian/changelog")"
    if [ "$i" = grid_packaging_tools ]; then
        tarball="$(basename $topdir/../package-output/gpt-$pkgversion.tar.gz)"
    elif [ "$i" = gsi_openssh ]; then
	tarball_path="$topdir/../package-output/gsi_openssh-$pkgversion-src.tar.gz"
	tarball="$(basename $tarball_path)"
        if [ ! -f "$tarball_path" ]; then
            bundle_tarball="gsi_openssh_bundle-${pkgversion}-src.tar.gz"
            bundle_url="https://sourceforge.net/projects/cilogon/files/gsissh/$bundle_tarball/download"
            curl -Ls "$bundle_url" | tar -C $topdir/../package-output \
                -zxf - $tarball
        fi
	striplevel=2
    else
        tarball="$(basename $topdir/../package-output/$i-$pkgversion.tar.gz)"
    fi
    if test -d "$debiandir/$debname"; then
	cp -R $debiandir/$debname $debname
	tar --strip $striplevel -C "$debname" \
		-zxf "$topdir/../package-output/$tarball"
	cp $topdir/../package-output/$tarball "$topdir/${debname}_${pkgversion}.orig.tar.gz"

        cd "$debname";
       fakeroot dpkg-buildpackage -sa ${binaryonly:+-b}
	cd -
        thisinstall="$(get_package_filenames "$topdir" $debout | grep -Ev 'condor|lsf|pbs|slurm|sge|-fork' || true)"
        if [ "$thisinstall" != "" ]; then
            sudo dpkg -i $thisinstall || true
        fi
    fi
done

# Build, but do not install, metapackages such as globus-gridftp and globus-gsi
for debname in $metapackages; do
    if [ ! -d "$debiandir/$debname" ]; then
        echo "Skipping $debname---no debian metadata"
        continue
    fi
    if test -d "$debiandir/$debname"; then
	cp -R $debiandir/$debname $debname

        cd "$debname";
        fakeroot dpkg-buildpackage -sa ${binaryonly:+-b}
	cd -
    fi
done

# Build repo definition package if not in a chroot
if [ $in_chroot = 0 ]; then
    cp -R "$debiandir/globus-repository" "$topdir/globus-repository"

    cd "$topdir/globus-repository"
    autoreconf -i
    TOOLKIT_VERSION=$(cat $packagingdir/fait_accompli/version)
    TOOLKIT_MAJOR=${TOOLKIT_VERSION%%.*}
    TOOLKIT_MINOR=${TOOLKIT_VERSION%.*}
    TOOLKIT_MINOR=${TOOLKIT_MINOR#*.}

    # Modify globus-repository to generate globus-repository-@RELEASENAME@
    # packages
    sed -e "s/@RELEASENAME@/${releasename}/g" \
        -e "s/@TOOLKIT_MAJOR_VERSION@/$TOOLKIT_MAJOR/" \
        -e "s/@TOOLKIT_MINOR_VERSION@/$TOOLKIT_MINOR/" \
        < debian/control.in > debian/control
    rm -f debian/control.in

    cat > debian/globus-repository-${releasename}.install <<EOF 
debian/tmp/etc/apt/sources.list.d/globus.list
debian/tmp/usr/share/tasksel/globus-tasks.desc
EOF
    cat > debian/globus-repository-${TOOLKIT_MAJOR}.${TOOLKIT_MINOR}-stable-${releasename}.install <<EOF 
debian/tmp/etc/apt/sources.list.d/globus-stable.list
debian/tmp/usr/share/tasksel/globus-tasks.desc
EOF
    cat > debian/globus-repository-${TOOLKIT_MAJOR}.${TOOLKIT_MINOR}-testing-${releasename}.install <<EOF 
debian/tmp/etc/apt/sources.list.d/globus-testing.list
debian/tmp/usr/share/tasksel/globus-tasks.desc
EOF

    cp debian/globus-repository.postinst \
        debian/globus-repository-${releasename}.postinst
    cp debian/globus-repository.postinst \
        debian/globus-repository-${TOOLKIT_MAJOR}.${TOOLKIT_MINOR}-stable-${releasename}.postinst
    cp debian/globus-repository.postinst \
        debian/globus-repository-${TOOLKIT_MAJOR}.${TOOLKIT_MINOR}-testing-${releasename}.postinst
    rm debian/globus-repository.postinst

    cp debian/globus-repository.postrm \
        debian/globus-repository-${releasename}.postrm
    cp debian/globus-repository.postrm \
        debian/globus-repository-${TOOLKIT_MAJOR}.${TOOLKIT_MINOR}-stable-${releasename}.postrm
    cp debian/globus-repository.postrm \
        debian/globus-repository-${TOOLKIT_MAJOR}.${TOOLKIT_MINOR}-testing-${releasename}.postrm
    rm debian/globus-repository.postrm

    DEB_CONFIGURE_USER_FLAGS=--with-toolkit-version=$(cat $packagingdir/fait_accompli/version) fakeroot dpkg-buildpackage -sa ${binaryonly:+-b}
fi

cd "${topdir}"

# Remove what we built from the system
pkgs_to_rm="$(dpkg-query -W -f="\${Package}\t\${Status}\n" '*globus*' 'grid-packaging*' '*myproxy*' 'gsi-openssh*' | awk -F"	" "\$2 ~ /^install/ { print \$1 }" || true)"
if [ -n "$pkgs_to_rm" ]; then
    sudo dpkg -r $pkgs_to_rm
fi

# Move the results into an artifact directory
rm -rf "${packagingdir}/repo.old"
if [ -d "${packagingdir}/repo" ]; then
    mv "${packagingdir}/repo" "${packagingdir}/repo.old"
fi
mkdir -p "${packagingdir}/repo"
cd "${packagingdir}/repo"
mkdir -p changes
mkdir -p conf
if [ "$sign" = 1 ] ; then
    sign_with_line="$(printf "\nSignWith: yes")"
else
    sign_with_line=""
fi

cat > conf/distributions <<EOF
Label: Grid Community Toolkit
Suite: unstable
Codename: $releasename
Version: $osver
Architectures: amd64 i386 source
Components: contrib$sign_with_line
Description: Grid Community Toolkit Packages

EOF

if [ "$in_chroot" -eq 0 ]; then
    # Create artifact directory
    artifactdir="${WORKSPACE:-$topdir}/debian"
    rm -rf "${artifactdir}"
    mkdir -p "${artifactdir}"

    # outside of chroot, include all packages
    for x in "${topdir}"/*.changes; do
        reprepro -b . include unstable "$x"
        cp "$x" changes/
    done
    for x in "${topdir}"/*.*  "${topdir}-${chroot}"/*${chroot}.deb; do
        cp "$x" "${artifactdir}"
    done
    rm -f "${artifactdir}/"*.log

    if [ "$chroot" != "" ]; then
        # include only chroot-specific packages to avoid conflicts with
        # _all.deb packages having different tarballs
        for x in "${topdir}-${chroot}"/*${chroot}*deb; do
           reprepro -b . includedeb unstable "$x"
        done
    fi

    cd "${packagingdir}"
    find repo -name '*.deb' -exec basename {} \; > all-packages

    mkdir -p debbuild-out/${flavor}
    cp "${topdir}"/*.* debbuild-out/${flavor}
    if [ "$chroot" != "" ]; then
        mkdir -p debbuild-out/${chroot}
        cp "${topdir}-${chroot}"/*.* debbuild-out/${chroot}
    fi
fi



