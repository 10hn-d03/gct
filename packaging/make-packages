#!/bin/bash

# This script iterates over files in the subdirectory package-list
# Each file should define name, subdir, and build.
# The script will cd to subdir and execute the list of build commands

# If the result is a single gar, the file can also define "gar".
# Otherwise, it should perform appropriate processing in build.  The
# destination directory is available to the build commands as
# \$destdir

# Call with a package name to build a specific package.
#	E.g., ./make-packages grim
# Call with a CVS tag to build that tag.
#	E.g., ./make-packages alpha2

setup_environment() {
	#If user already has a JAVA_HOME, use it
	if [ x"$JAVA_HOME" = "x" ]; then
		# For MCS machines
		if [ -e /home/dsl/javapkgs/java-env-setup.sh ]; then
			source /home/dsl/javapkgs/java-env-setup.sh
		# My laptop
		elif [ -d /usr/java/jdk1.3.1_06 ]; then
			export JAVA_HOME=/usr/java/jdk1.3.1_06
		else
			echo "I can't find JAVA_HOME for your system."
			echo "Please set JAVA_HOME before running this script"
			exit 1
		fi
	fi

	export OGSA_HOME=`pwd`/gt3-core/core
}

# If we're on an MCS machine, just checkout from filesystem.
# Otherwise use ssh.
# If we have a co already, just update it.
# Use a tag if it is passed in.

checkout_cvs() {
	tag=$1

	if [ x"$tag" = "x" ]; then
		cvs_opts="";
	else
		cvs_opts="-r $tag";
	fi

	if [ -d /home/globdev/CVS/gridservices ]; then
		export CVSROOT=/home/globdev/CVS/gridservices
	else
		export CVSROOT=cvs.globus.org:/home/globdev/CVS/gridservices
		export CVS_RSH=ssh
	fi
	if [ ! -d ogsa-cvs ]; then
		echo Making fresh CVS checkout
		mkdir ogsa-cvs
		cd ogsa-cvs
		cvs co all $cvs_opts
	else
		echo Updating CVS checkout
		cd ogsa-cvs
		cvs -z3 -qq up all $cvs_opts
	fi
	cd ..

	echo
}

#If GPT hasn't been built here yet, build it now.
#Some packages use GPT_LOCATION commands in build-info.

install_gpt() {
	if [ -d gpt-2.2.5 ]; then
		echo Skipping GPT installation.
		echo Delete gpt-2.2.5 to force rebuild
		export GPT_LOCATION=`pwd`/gpt-2.2.5
	else
		tar xzf fait_accompli/gpt-2.2.5-src.tar.gz
		cd gpt-2.2.5
		export GPT_LOCATION=`pwd`
		./build_gpt
		cd ..
	fi
	echo
}

install_gt2() {
	export GLOBUS_LOCATION=`pwd`/gt2-installation
	echo Installing custom GT2 bundle
	$GPT_LOCATION/sbin/gpt-install fait_accompli/gt3_alpha_bin_bundle.tar.gz
	$GPT_LOCATION/sbin/gpt-postinstall
	echo
}

# Go to subdir, run the build script.
# Copy gar if one is specified.
make_binary_package() {
	export destdir=`pwd`/gt3-${name}/${name}

	if [ -d $destdir ]; then
		echo Skipping package $name;
		echo Delete $destdir to force rebuild;
	elif [ x$name = x ]; then
		echo Skipping missing packagedata
	else
		echo Building package $name;
		mkdir -p $destdir
		echo Moving to build directory
		pushd ogsa-cvs/$subdir
		echo Executing build script:
		echo ----------------------
		echo $build
		echo ----------------------
		echo
		/bin/bash -c "$build"
		popd
		if [ "x"$gar != "x" ]; then
			echo Copying GAR $gar
			cp ogsa-cvs/$subdir/$gar $destdir
		fi
		if [ -f package-list/$name/pkg_data_src.gpt ]; then
			cp package-list/$name/pkg_data_src.gpt gt3-$name
		fi
		touch $destdir/INSTALL
	fi
	
	unset destdir;
	echo
}

# Go to subdir, run the build script.
# Copy gar if one is specified.
make_source_package() {
	export destdir=`pwd`/gt3-${name}-src/

	if [ -d $destdir ]; then
		echo Skipping package $name;
		echo Delete $destdir to force rebuild;
	elif [ x$name = x ]; then
		echo Skipping missing packagedata
	else
		echo Creating source package for $name;

		pushd ogsa-cvs/$subdir
		echo Running ant clean ...
		ant clean
		popd

		echo Copying source dir to $destdir
		mkdir -p $destdir
		cp -Rp ogsa-cvs/$subdir $destdir/${name}

		if [ -f package-list/$name/pkg_data_src.gpt ]; then
			echo Copying in source metadata
			cp package-list/$name/pkg_data_src.gpt gt3-${name}-src
		fi

		if [ -f package-list/$name/filelist ]; then
			echo Copying in filelist
			cp package-list/$name/filelist gt3-${name}-src
		fi

		touch $destdir/${name}/INSTALL
	fi
	
	unset destdir;
	echo
}

#Cleanup env for next iteration.
unset_env() {
	unset name subdir build gar;
}

dir_iter() {
	for f in $1/*; do
		source $f/build-info
		make_source_package
		# make_binary_package
		unset_env
	done
}

collate_packages() {
	if [ ! -d package-output ]; then
		mkdir package-output
	fi

	for f in gt3-*; do
		tar czf package-output/$f.tar.gz $f
	done

	cp fait_accompli/* package-output
	cp install-alpha package-output
}


#The one-package case.
if [ x$1 != "x" && -d package-list/$1 ]; then
	setup_environment
	source package-list/$1/build-info
	make_source_package
	# make_binary_package
	exit
fi

setup_environment
install_gpt
checkout_cvs $1

#This is the poor man's dependency code ...

echo Building Java-only packages
dir_iter package-list
echo

install_gt2

echo Building C-dependent packages
dir_iter package-list-cdeps

collate_packages
