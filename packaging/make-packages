#!/bin/bash

# This script iterates over directories in the subdirectory package-list
# and package-list-cdeps.
# Each directory should have a build-info and a pkg_data_src.gpt
# build-info should contain "name=" and "subdir=".
# make_source_package will create a GPT package containing subdir
# with the metadata in pkg_data_src.gpt

version="0.2"

usage () {
	echo $0: Usage:  $0 [-p package] [-t tag] [-n] [-h]
	echo
	echo "With no arguments, checkout and build all of GT3."
	echo "		$0 -p grim		Build package-list/grim"
	echo "		$0 -t my_tag	Use \"-r my_tag\" in cvs commands"
	echo "		$0 -n 		Don't update the CVS checkout"
	echo "		$0 -h		Print this help message"
	echo "		$0 -c		Just build C bindings"
	echo
}

setup_environment() {
	#If user already has a JAVA_HOME, use it
	if [ x"$JAVA_HOME" = "x" ]; then
		# For MCS machines
		if [ -e /home/dsl/javapkgs/java-env-setup.sh ]; then
			source /home/dsl/javapkgs/java-env-setup.sh
		# My laptop
		elif [ -d /usr/java/jdk1.3.1_06 ]; then
			export JAVA_HOME=/usr/java/jdk1.3.1_06
		else
			echo "I can't find JAVA_HOME for your system."
			echo "Please set JAVA_HOME before running this script"
			exit 1
		fi
	fi

}

# If we're on an MCS machine, just checkout from filesystem.
# Otherwise use ssh.
# If we have a co already, just update it.
# Use a tag if it is passed in.

checkout_cvs() {
	tag=$1

	if [ x"$tag" = "x" ]; then
		cvs_opts="";
	else
		cvs_opts="-r $tag";
	fi

	if [ -d /home/globdev/CVS/gridservices ]; then
		export CVSROOT=/home/globdev/CVS/gridservices
	else
		export CVSROOT=cvs.globus.org:/home/globdev/CVS/gridservices
		export CVS_RSH=ssh
	fi
	if [ ! -d ogsa-cvs ]; then
		echo Making fresh CVS checkout
		mkdir ogsa-cvs
		cd ogsa-cvs
		cvs co $cvs_opts all 
	else
		echo "Updating CVS checkout."
		cvs stat ogsa-cvs/ogsa/impl/java/build.xml | grep Tag
		cd ogsa-cvs
		for f in *; do
			cd $f
			cvs -z3 -qq up 
			cd ..
		done
	fi
	cd ..

	echo
}

#If GPT hasn't been built here yet, build it now.
#Some packages use GPT_LOCATION commands in build-info.

install_gpt() {
	if [ -d gpt-2.2.5 ]; then
		echo Skipping GPT installation.
		echo Delete gpt-2.2.5 to force rebuild
		export GPT_LOCATION=`pwd`/gpt-2.2.5
	else
		echo Installing gpt-2.2.5
		tar xzf fait_accompli/gpt-2.2.5-src.tar.gz
		cd gpt-2.2.5
		export GPT_LOCATION=`pwd`
		./build_gpt
		cd ..
	fi
	echo
}

install_gt2() {
	export GLOBUS_LOCATION=`pwd`/gt2-installation
	if [ -d gt2-installation ]; then
		echo Skipping GT2 installation.
		echo Delete gt2-installation to force rebuild
	else
		echo Installing custom GT2 bundle
		$GPT_LOCATION/sbin/gpt-install fait_accompli/gt3_alpha2_bin_bundle-r1_bin.tar.gz
		$GPT_LOCATION/sbin/gpt-build -force fait_accompli/globus_core-2.8.tar.gz gcc32dbg
		$GPT_LOCATION/sbin/gpt-postinstall
	fi
	echo
}

install_cdeps() {
	if [ -d /home/globdev/CVS/globus-packages ]; then
		export CVSROOT=/home/globdev/CVS/globus-packages
	else
		export CVSROOT=cvs.globus.org:/home/globdev/CVS/globus-packages
		export CVS_RSH=ssh
	fi
		
	pushd ogsa-cvs/ogsa-c/build_tools
	cvs -d$CVSROOT co side_tools/build-autotools
	./side_tools/build-autotools
	export PATH=$PWD/autotools/bin:$PATH
	./cvs-build-ogsa -force gcc32dbg
	cd binary_packages
	$GPT_LOCATION/sbin/gpt-bundle -bindir=. -output=ogsa_cbindings_bin_bundle.tar.gz `cat packaging_list | xargs`
	cd ../source_packages
	$GPT_LOCATION/sbin/gpt-bundle -srdir=. -output=ogsa_cbindings_src_bundle.tar.gz `cat packaging_list | xargs`

	popd

	mkdir -p package-output
	cp ogsa-cvs/ogsa-c/ogsa_cbindings_*_bundle.tar.gz package-output

}

# Go to subdir, run the build script.
# Copy gar if one is specified.
make_binary_package() {
	export destdir=`pwd`/gt3-${name}/${name}

	if [ -d $destdir ]; then
		echo Skipping package $name;
		echo Delete $destdir to force rebuild;
	elif [ x$name = x ]; then
		echo Skipping missing packagedata
	else
		echo Building package $name;
		mkdir -p $destdir
		echo Moving to build directory
		pushd ogsa-cvs/$subdir
		echo Executing build script:
		echo ----------------------
		echo $build
		echo ----------------------
		echo
		/bin/bash -c "$build"
		popd
		if [ "x"$gar != "x" ]; then
			echo Copying GAR $gar
			cp ogsa-cvs/$subdir/$gar $destdir
		fi
		if [ -f package-list/$name/pkg_data_src.gpt ]; then
			cp package-list/$name/pkg_data_src.gpt gt3-$name
		fi
		touch $destdir/INSTALL
	fi
	
	unset destdir;
	echo
}

# Go to subdir, run the build script.
# Copy gar if one is specified.
make_source_package() {
	export destdir=`pwd`/${name}-0.2-src/

	if [ -d $destdir ]; then
		echo Skipping package $name;
		echo Delete $destdir to force rebuild;
	elif [ x$name = x ]; then
		echo Skipping missing packagedata
	else
		echo Creating source package for $name;

		pushd ogsa-cvs/$subdir

		if [ -f build.xml ]; then
			echo Running ant cleanAll ...
			ant cleanAll
		elif [ -f impl/java/build.xml ]; then
			echo Running ant cleanAll ...
			ant -f impl/java/build.xml cleanAll
		fi

		popd

		echo Copying source dir to $destdir
		mkdir -p $destdir
		cp -Rp ogsa-cvs/$subdir $destdir/${name}

		if [ -f package-list/$name/pkg_data_src.gpt ]; then
			echo Copying in source metadata
			cp package-list/$name/pkg_data_src.gpt $destdir
		fi

		if [ -f package-list/$name/filelist ]; then
			echo Copying in filelist
			cp package-list/$name/filelist $destdir
		fi

		touch $destdir/${name}/INSTALL
	fi
	
	unset destdir;
	echo
}

#Cleanup env for next iteration.
unset_env() {
	unset name subdir build gar;
}

dir_iter() {
	for f in $1/*; do
		if [ -e $f/build-info ]; then
			source $f/build-info
			make_source_package
			# make_binary_package
			unset_env
		fi
	done
}

collate_packages() {
	if [ ! -d package-output ]; then
		mkdir package-output
	fi

	for f in *-src; do
		tar czf package-output/$f.tar.gz $f
	done

	$GPT_LOCATION/sbin/gpt-bundle -srcdir=package-output -all -exclude=mmjfs -exclude=gt3_hostinfo

	cp fait_accompli/* package-output
	cp install-alpha2-src package-output
}


read_args() {
	tag=""
	update=1
	package=""
	onlyc=-1;

	while [ x$1 != "x" ]; do
		if [ $1 = "-t" ]; then
			export tag=$2;
			shift; shift;
		elif [ $1 = "-n" ]; then
			update=-1;
			shift;
		elif [ $1 = "-p" ]; then
			package=$2;
			shift; shift;
		elif [ $1 = "-c" ]; then
			onlyc=1;
			shift;
		elif [ $1 = "-h" ]; then
			usage
			exit
		else
			echo "Unrecognized option $1"
			usage
			exit
		fi
	done

	export tag update package onlyc;
}


# main

read_args "$@"

#The one-package case.
if [ x$package != "x" ]; then
	setup_environment
	if [ $update = 1 ]; then
		checkout_cvs
	fi
	source package-list/$package/build-info
	make_source_package
	mkdir -p package-output
	tar czf package-output/${name}-0.2.tar.gz ${name}*-src
	# make_binary_package
	exit
fi

setup_environment
install_gpt

if [ $update = 1 ]; then
	checkout_cvs $tag
else
	echo Skipping CVS update
	echo
fi

#This is the poor man's dependency code ...

if [ $onlyc != 1 ]; then
	echo Building Java-only packages
	dir_iter package-list
	echo
fi

install_gt2

# echo Building C-dependent packages
# install_cdeps
# dir_iter package-list-cdeps

collate_packages
