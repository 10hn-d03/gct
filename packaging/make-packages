#!/bin/bash

# This script iterates over directories in the subdirectory package-list
# and package-list-cdeps.
# Each directory should have a build-info and a pkg_data_src.gpt
# build-info should contain "name=" and "subdir=".
# make_source_package will create a GPT package containing subdir
# with the metadata in pkg_data_src.gpt

version="0.3"

usage () {
	echo $0: Usage:  $0 [-p package] [-t tag] [-i dir [-r]] [-n] [-h] [-c] [-a]
	echo
	echo "With no arguments, checkout and build all of GT3."
	echo "		$0 -p grim		Build package-list/grim"
	echo "		$0 -t my_tag	Use \"-r my_tag\" in cvs commands"
	echo "		$0 -i dir	Install into dir"
	echo "		$0 -r		Make a release candidate.  Requires -i"
	echo "		$0 -n 		Don't update the CVS checkout"
	echo "		$0 -a		Use anonymous CVS checkouts"
	echo "		$0 -h		Print this help message"
	echo "		$0 -c		Just build C bindings"
	echo
}

setup_environment() {
	#If user already has a JAVA_HOME, use it
	if [ x"$JAVA_HOME" = "x" ]; then
		# For MCS machines
		if [ -e /home/dsl/javapkgs/java-env-setup.sh ]; then
			source /home/dsl/javapkgs/java-env-setup.sh
		# My laptop
		elif [ -d /usr/java/jdk1.3.1_06 ]; then
			export JAVA_HOME=/usr/java/jdk1.3.1_06
		else
			echo "I can't find JAVA_HOME for your system."
			echo "Please set JAVA_HOME before running this script"
			exit 1
		fi
	fi

}

# checkout_cvs_generic cvsdir checkoutdir [ tag ]
checkout_cvs_generic() {
	cvsdir=$1
	checkoutdir=$2
	cvstag=$3

	if [ x"$cvstag" = "x" ]; then
		cvs_opts="";
	else
		cvs_opts="-r $cvstag";
		echo "Using tag $cvstag"
	fi

	if [ $anonymous = 1 ]; then
		echo Using anonymous CVS ...
		export CVSROOT=:pserver:anonymous@cvs.globus.org:$cvsdir
	elif [ -d $cvsdir ]; then
		export CVSROOT=$cvsdir
	else
		export CVSROOT=cvs.globus.org:$cvsdir
		export CVS_RSH=ssh
	fi

	if [ ! -d $checkoutdir ]; then
		echo Making fresh CVS checkout.
		mkdir $checkoutdir
		cd $checkoutdir
		cvs co $cvs_opts all 
		cd ..
	elif [ $update = 1 ]; then
		echo "Updating CVS checkout."
		# cvs stat ogsa-cvs/ogsa/impl/java/build.xml | grep Tag
		cd $checkoutdir
		for f in *; do
			cd $f
			cvs -z3 -qq up 
			cd ..
		done
		cd ..
	else
		echo "Skipping CVS update"
	fi

	echo
}

# Checkout GT3 cvs
checkout_cvs() {
	checkout_cvs_generic /home/globdev/CVS/gridservices ogsa-cvs $tag
}

checkout_cvs_gt2() {
	checkout_cvs_generic /home/globdev/CVS/globus-packages gt2-cvs $tag
}

#If GPT hasn't been built here yet, build it now.
#Some packages use GPT_LOCATION commands in build-info.

install_gpt_generic() {
	installdir=$1
	bundle=$2

	if [ -d $installdir ]; then
		echo Skipping GPT installation.
		echo Delete $installdir to force rebuild
		export GPT_LOCATION=`pwd`/$installdir
	else
		echo Installing gpt
		tar xzf $bundle
		cd $installdir
		export GPT_LOCATION=`pwd`
		./build_gpt
		cd ..
	fi
	echo
}

install_gpt2() {
	install_gpt_generic gpt-2.2.5 fait_accompli/gpt-2.2.5-src.tar.gz
}

install_gpt3() {
	install_gpt_generic gpt-3.0rc1 fait_accompli/gpt-3.0rc1-src.tar.gz
}

install_gt2_binary() {
	export GLOBUS_LOCATION=$1
	echo Installing custom GT2 bundle
	$GPT_LOCATION/sbin/gpt-install fait_accompli/gt3_alpha2_bin_bundle-r1_bin.tar.gz
	$GPT_LOCATION/sbin/gpt-build -force fait_accompli/globus_core-2.8.tar.gz gcc32dbg
	$GPT_LOCATION/sbin/gpt-postinstall
	echo
}

install_gt2_source() {
        flavor="gcc32dbg"
	export GLOBUS_LOCATION=$1

        checkout_cvs_gt2 $gt2_branch 

	cd gt2-cvs

	# Always build autotools, since cbindings needs it also.
	./side_tools/build-autotools
	export PATH=$PWD/autotools/bin:$PATH

	if [ -d ../gt2-installation ]; then
		echo There is an existing gt2-installation, skipping rebuild.
		echo Delete gt2-installation to force a rebuild.
	else
		cd side_tools
        	./cvs-build -noupdates -builddir=.. -installdir=$GLOBUS_LOCATION -everything $flavor
		cd ..
	fi

	cd .. 
}

# Our GLOBUS_LOCATION was set when we installed GT2
# and we built autotools and put it on our path already.
# (May need to change this if I add a "from-binary/from-source" switch for the gt2 install)
# Need to unset gpt location - it's 2.x version, and there's a 1.x version in
# $GLOBUS_LOCATION.  This freaks cvs-build-ogsa out.

install_cdeps() {
		
	pushd ogsa-cvs/ogsa-c/build_tools

	OGPT=$GPT_LOCATION
	unset GPT_LOCATION

	./cvs-build-ogsa --force gcc32dbg
	
	export GPT_LOCATION=$OGPT
	cd bin_packages
	$GPT_LOCATION/sbin/gpt-bundle -all -bindir=. -output=ogsa_cbindings_bin_bundle.tar.gz
	cd ../source_packages
	$GPT_LOCATION/sbin/gpt-bundle -all -srcdir=. -output=ogsa_cbindings_src_bundle.tar.gz 
	popd

	mkdir -p package-output
	cp ogsa-cvs/ogsa-c/ogsa_cbindings_*_bundle.tar.gz package-output
}

# Go to subdir, run the build script.
# Copy gar if one is specified.
make_source_package() {
	export destdir=`pwd`/${name}-${version}-src/

	if [ -d $destdir ]; then
		echo Skipping package $name;
		echo Delete $destdir to force rebuild;
	elif [ x$name = x ]; then
		echo Skipping missing packagedata
	else
		echo Creating source package for $name;

		pushd ogsa-cvs/$subdir

		if [ -f build.xml ]; then
			echo Running ant cleanAll ...
			ant cleanAll
		elif [ -f impl/java/build.xml ]; then
			echo Running ant cleanAll ...
			ant -f impl/java/build.xml cleanAll
		fi

		popd

		echo Copying source dir to $destdir
		mkdir -p $destdir
		cp -Rp ogsa-cvs/$subdir $destdir/${name}

		if [ -f package-list/$name/pkg_data_src.gpt ]; then
			echo Copying in source metadata
			cp package-list/$name/pkg_data_src.gpt $destdir
		fi

		if [ -f package-list/$name/filelist ]; then
			echo Copying in filelist
			cp package-list/$name/filelist $destdir
		fi

		touch $destdir/${name}/INSTALL
	fi
	
	unset destdir;
	echo
}

#Cleanup env for next iteration.
unset_env() {
	unset name subdir build gar;
}

#iter_generic dir
#dir should contain a file called build-info
iter_generic() {
	if [ -e $1/build-info ]; then
		source $1/build-info
		make_source_package
		unset_env
	else
		echo "Couldn't find $1/build-info"
	fi
}

#iterate over a directory
dir_iter() {
	for f in $1/*; do
		iter_generic $f
	done
}

#iterate over package names
package_iter() {
	for f in $@; do
		iter_generic package-list/$f;
	done
}

collate_packages() {
	
	if [ ! -d package-output ]; then
		mkdir package-output
	fi

	for f in *-src; do
		tar czf package-output/$f.tar.gz $f
	done

	#This is our gt3 src bundle.
	#Package it with the gt2 src bundle to make a distro
        # - hostinfo require bootstrap, currently working around with fait_accompli
        rm package-output/hostinfo-0.3-src.tar.gz
        cp fait_accompli/gt3_hostinfo-0.3_src.tar.gz package-output

	$GPT_LOCATION/sbin/gpt-bundle -bn=gt3-all-src -bv=1.0 -srcdir=package-output -all

	if [ $release = 1 ]; then
		mkdir -p release-candidate/gt3-alpha3-source-installer
		cp gt3-all-src* release-candidate/gt3-alpha3-source-installer
		cp fait_accompli/gt3_alpha2_src_bundle-r1_src.tar.gz release-candidate/gt3-alpha3-source-installer
		cp fait_accompli/gpt-2.2.5-src.tar.gz release-candidate/gt3-alpha3-source-installer
		cp fait_accompli/install-gt3-alpha3-src release-candidate/gt3-alpha3-source-installer
		cp fait_accompli/OGSI.NET.zip release-candidate/gt3-alpha3-source-installer
		pushd release-candidate
		tar czf gt3_alpha3_src_installer.tar.gz gt3-alpha3-source-installer
		rm -fr gt3-alpha3-source-installer
		popd
	fi

}

install_bundle() {
	echo Installing into $dir
	export GLOBUS_LOCATION=$dir
	$GPT_LOCATION/sbin/gpt-build gt3-all-src-1.0-src_bundle.tar.gz gcc32dbg

	if [ $release = 1 ]; then
		echo Collecting GT3 binaries from $dir
		$GPT_LOCATION/sbin/gpt-pkg --installdir=$dir -all

		# This is our gt3 binary bundle
		# Package it with the gt2 binary bundle to make a distro
		# Do this before installing GT2 to avoid getting all those
		# packages also.
		$GPT_LOCATION/sbin/gpt-bundle -bn=gt3-all-bin -bv=1 -all -bindir=binaries

		mkdir -p release-candidate/gt3-alpha3-binary-installer
		mv gt3-all-bin* release-candidate/gt3-alpha3-binary-installer
		cp fait_accompli/gt3_alpha2_bin_bundle-r1_bin.tar.gz release-candidate/gt3-alpha3-binary-installer
		cp fait_accompli/gpt-2.2.5-src.tar.gz release-candidate/gt3-alpha3-binary-installer
		cp fait_accompli/install-gt3-alpha3-bin release-candidate/gt3-alpha3-binary-installer
		cp fait_accompli/OGSI.NET.zip release-candidate/gt3-alpha3-binary-installer
		cp fait_accompli/globus-rls-server-1.1-i686-pc-linux-gnu-bin.tar.gz release-candidate/gt3-alpha3-binary-installer
		pushd release-candidate
		tar czf gt3_alpha3_bin_installer.tar.gz gt3-alpha3-binary-installer
		rm -fr gt3-alpha3-binary-installer
		popd
	fi

	echo Installing GT2 dep bundle into $dir
	install_gt2_binary $dir

	if [ $release = 1 ]; then
		# This is gt3 core binary.  Distribute by itself.
		pushd BUILD/core-0.3-src/core/impl/java/build/
		tar czf gt3-core-alpha3.tar.gz ogsa-alpha-3/
		popd
		mv BUILD/core-0.3-src/core/impl/java/build/gt3-core-alpha3.tar.gz release-candidate

		# This is gt3 core source.  Distribute by itself.
		pushd ogsa-cvs/
		tar czf gt3-core-src-alpha3.tar.gz ogsa
		popd
		mv ogsa-cvs/gt3-core-src-alpha3.tar.gz release-candidate

		# This is the gars bundle.  Distribute by itself,
		# but it needs core installed first.
		mkdir gars/
		cp $dir/gars/* gars
		tar czf release-candidate/gt3-alpha3-gars.tar.gz gars
	fi

}

read_args() {
	dir=""
	install=-1
	buildjava=1
	buildc=1
	package=""
	release=-1
	tag=""
	gt2_branch="HEAD"
	update=1
	anonymous=0

	while [ x$1 != "x" ]; do
		if [ $1 = "-t" ]; then
			export tag=$2;
			shift; shift;
		elif [ $1 = "-r" ]; then
			release=1;
			shift;
		elif [ $1 = "-p" ]; then
			package=$2;
			shift; shift;
		elif [ $1 = "-n" ]; then
			update=-1;
			shift;
		elif [ $1 = "-i" ]; then
			install=1;
			dir=$2;
			shift; shift;
		elif [ $1 = "-h" ]; then
			usage
			exit
		elif [ $1 = "-c" ]; then
			buildjava=-1;
			buildc=1;
			shift;
		elif [ $1 = "-j" ]; then
			buildjava=1;
			buildc=-1;
			shift;
		elif [ $1 = "-a" ]; then
			anonymous=1;
			shift;
		else
			echo "Unrecognized option $1"
			usage
			exit
		fi
	done

	export buildc buildjava install tag update package onlyc release;
}


# main

read_args "$@"
setup_environment

#The named packages case.
if [ x"$package" != "x" ]; then
	checkout_cvs

	package_iter $package

	tar czf package-output/${name}-${version}.tar.gz ${name}*-src
	exit
fi

install_gpt2
#install_gpt3

checkout_cvs $tag

#This is the poor man's dependency code ...

if [ $buildjava = 1 ]; then
	echo Building Java-only packages
	dir_iter package-list
	echo
fi

if [ $buildc = 1 ]; then
	echo Building GT2 from CVS ...
	install_gt2_source `pwd`/gt2-installation

	echo Building C-dependent packages
	install_cdeps
	dir_iter package-list-cdeps
fi

collate_packages

if [ $install = 1 ]; then
	install_bundle
fi
