<?xml version="1.0"?>

<!-- ===================================================================

Build script for building bits of OGSA outside of the main tree.

Useful targets are:

  compile - compiles
  jar - makes a jar

Copyright (c) 1999 University of Chicago and The University of 
Southern California. All Rights Reserved.

==================================================================== -->


<project default="all" basedir=".">


<!-- This should be the only place where we reference outside of 
     our own playground/gram directory.
     This means that should be able to move the whole playground/gramskres 
     directory around with only this property needing to be changed.
-->
  <!-- Give user a chance to override without editing this file
       (and without typing -D each time it compiles it) -->

  <property file="${user.home}/build.properties"/>
  <property file="build.properties"/>
  <property name="ogsa.root" value="../../ogsa/impl/java"/>
  <property file="${ogsa.root}/ogsa.properties"/>
  <property name="ogsa.builddir" value="${ogsa.root}/build" />
  <property name="ogsa.libdir" value="${ogsa.root}/lib" />
  <property name="ogsa.gardir" value="${ogsa.builddir}/gar" />

<!-- the name of the jarfile to generate -->
  <property name="jarname" value="filestreaming" />
  <property name="build.dir" value="build" />
  <property name="Name" value="OGSA"/>
  <property name="src.dir" value="./src"/>
  <property name="build.dest" value="${build.dir}/classes"/>
  <property name="build.lib" value="./lib"/>
  <property name="build.javadocs" value="${build.dir}/javadocs"/>
  <property name="build.services" value="${ogsa.root}/build-services.xml"/>
  <property name="stubs.dir" value="./src/org/globus/ogsa/base"/>
  <property name="schema.dir" value="schema"/>
  <property name="schema.origin" value="${ogsa.root}/schema"/>
  <property name="package.dir" value="filestreaming"/>
  <property name="build.packages" value="build-packages.xml"/>
  <property name="test-reports.dir" value="test-reports"/>
  <property name="nsmap.file" value="NStoPkg.properties"/>
  
  
  <!-- properties added for filestreaming -->
 
  <!-- =================================================================== -->
  <!-- Determine what dependencies are present                             -->
  <!-- =================================================================== -->
  <path id="classpath">
    <pathelement location="."/>
    <pathelement location="${java.home}/../lib/tools.jar"/>
    <pathelement location="${build.dest}"/>
    <pathelement location="${ogsa.root}/build/classes"/>
    <fileset dir="lib">
     <include name="*.jar"/>
    </fileset>
    <fileset dir="${ogsa.root}/lib">
     <include name="*.jar"/>
    </fileset>
    <pathelement path="${java.class.path}"/>
  </path>

  <target name="setenv">
    <mkdir dir="${build.dest}"/>
    <mkdir dir="${build.lib}"/>

    <available property="key.present" file="${keystore}" />
    <available property="stubs.present" type="dir" file="${stubs.dir}" />

    <echo message=" Build environment for ${Name} " />
    <echo message=" Flags (Note: If the {property name} is displayed, "/>
    <echo message="           then the component is not present)" />
    <echo message=""/>
    <echo message=" Property values " />
    <echo message="debug=${debug}" />
    <echo message="deprecation=${deprecation}" />

    <uptodate property="javadoc.notrequired"
              targetfile="${build.javadocs}/index.html">
      <srcfiles dir="${src.dir}" includes="**/*.java" />
    </uptodate>


  </target>

  <target name="copySchemaDir">
    <copy toDir="${schema.dir}">
        <fileset dir="${schema.origin}" casesensitive="yes"/>
    </copy>
    <copy file="${schema.origin}/${nsmap.file}" toDir="./"/>
  </target>


  <!-- =================================================================== -->
  <!-- Generate Service and Binding wsdls from port type wsdls             -->
  <!-- =================================================================== -->
  <target name="generateWSDL" depends="setenv">
   <antcall target="copySchemaDir"/>
   <ant antfile="${ogsa.root}/${build.services}" target="GWSDL2WSDL">
    <property name="build.schema.dir" value="${cas.schema.dir}"/>
    <property name="wsdl.root" value="cas_port_type"/>
   </ant>
   <ant antfile="${ogsa.root}/${build.services}" target="generateBinding">
    <property name="binding.root" value="cas"/>
    <property name="build.schema.dir" value="${cas.schema.dir}"/>
    <property name="porttype.wsdl" value="cas_port_type.wsdl"/>
   </ant>
   <ant antfile="${ogsa.root}/${build.services}" target="GWSDL2WSDL">
    <property name="build.schema.dir" value="${cas.schema.dir}"/>
    <property name="wsdl.root" value="cas_port_type"/>
   </ant>
   <ant antfile="${ogsa.root}/${build.services}" target="generateBinding">
    <property name="binding.root" value="cas"/>
    <property name="build.schema.dir" value="${cas.schema.dir}"/>
    <property name="porttype.wsdl" value="cas_port_type.wsdl"/>
   </ant>
  </target>

  <!-- =================================================================== -->
  <!-- Generate stubs from the WSDLs                                       -->
  <!-- =================================================================== -->
  <target name="stubs" unless="stubs.present" depends="generateWSDL">
   <ant antfile="${ogsa.root}/${build.services}" target="generateStubs">
    <property name="schema.file.dir" value="${cas.schema.dir}"/>
    <property name="schema.file" value="cas_service.wsdl"/>
    <!-- Command run from within schema dir -->
    <property name="stubs.dest" value="../src"/>
   </ant>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source directory                                       -->
  <!-- =================================================================== -->
  <target name="compile" depends="stubs">
    <javac srcdir="${src.dir}" destdir="${build.dest}" debug="${debug}"
      deprecation="${deprecation}"
      classpathref="classpath">
      <include name="**/filestreaming/*" />
    </javac>
 </target>



  <target name="jar" depends="compile">
    <jar jarfile="${build.lib}/${jarname}.jar" basedir="${build.dest}" >
    <!-- ben: warning here if you aren't a .org domain! -->
      <include name="org/**" />
      <include name="*.xml" />
      <include name="*.wsdd" />
    </jar>
  </target>

  <!-- =================================================================== -->
  <!-- Build/Test EVERYTHING from scratch!                                 -->
  <!-- =================================================================== -->
  <target name="all" depends="compile, jar,gar"/>

  <!-- =================================================================== -->
  <!-- Compiles the JUnit testcases -->
  <!-- =================================================================== -->

  <path id="test-classpath">
    <pathelement location="${build.dest}" />
    <path refid="classpath"/>
  </path>

 
  <!-- Gar Packaging -->
  <target name="gar" depends="jar">
    <copy todir="${build.lib}">
      <fileset dir="${lib.dir}">
          <include name="**/*.jar"/>
      </fileset>
    </copy>
    <ant antfile="${ogsa.root}/${build.packages}" target="makeGar">
      <property name="gar.name" value="${build.lib}/${package.dir}.gar"/>
      <property name="garlib.dir" value="${build.lib}"/>
      <property name="garserverdeployment.file" value="server-config.wsdd"/>
      <property name="garclientdeployment.file" value="client-config.wsdd"/>
      <property name="garschema.origin" value="./schema/base/gram"/>
      <property name="garschema.path" value="base/gram"/>
    </ant>
  </target>

  <!-- =================================================================== -->
  <!-- Cleans everything                                                   -->
  <!-- =================================================================== -->
  <target name="clean">
    <delete dir="${build.dir}"/>
    <delete file="${build.lib}/${jarname}.jar"/>
    <delete file="${build.lib}/${package.dir}.gar"/>

  </target>

  <target name="cleanAll" depends="clean">
    <delete dir="${stubs.dir}"/>
    <delete includeEmptyDirs="true">
      <fileset dir="${schema.dir}">
        <exclude name="base/gram/file_streaming*"/>
      </fileset>
    </delete>
  </target>

  <target name="deployGar" depends="gar">
       <copy todir="${ogsa.root}/lib" file="${build.lib}/${package.dir}.gar"/>
       <ant antfile="${build.packages}" target="deployGar" dir="${ogsa.root}">
         <property name="gar.name" value="${build.lib}/${package.dir}.gar"/>       
         <reference refid="classpath" torefid="classpath"/>
       </ant>
  </target>


 </project>
