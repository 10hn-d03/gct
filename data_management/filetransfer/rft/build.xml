<?xml version="1.0"?>

<!-- ===================================================================

Build script for building bits of OGSA outside of the main tree.

Useful targets are:

  compile - compiles
  jar - makes a jar

Copyright (c) 1999 University of Chicago and The University of 
Southern California. All Rights Reserved.

==================================================================== -->


<project default="all" basedir=".">


<!-- This should be the only place where we reference outside of 
     our own playground/gram directory.
     This means that should be able to move the whole playground/gramskres 
     directory around with only this property needing to be changed.
-->

  <property name="ogsacore.root" value="../ogsa" />
  <property name="ogsacore.javadir" value="${ogsacore.root}/impl/java" />
  <property name="ogsacore.builddir" value="${ogsacore.javadir}/build" />
  <property name="ogsacore.libdir" value="${ogsacore.javadir}/lib" />
  <property name="ogsacore.gardir" value="${ogsacore.builddir}/gar" />

<!-- the name of the jarfile to generate -->
  <property name="jarname" value="rft" />

  <property name="build.dir" value="build" />

  <!-- Give user a chance to override without editing this file
       (and without typing -D each time it compiles it) -->
  <property file="build.properties"/>
  <property file="${user.home}/build.properties"/>
  <property file="${ogsacore.root}/impl/java/ogsa.properties"/>
  <property name="Name" value="OGSA"/>
  <property name="src.dir" value="./src"/>
  <property name="build.dest" value="${build.dir}/classes"/>
  <property name="build.lib" value="./lib"/>
  <property name="build.javadocs" value="${build.dir}/javadocs"/>
  <property name="build.services" value="${ogsacore.root}/impl/java/build-services.xml"/>
  <property name="stubs.dir" value="./src/org/globus/ogsa/base"/>
  <property name="schema.dir" value="schema"/>
  <property name="schema.origin" value="${ogsacore.root}/impl/java/schema"/>
  <property name="package.dir" value="reliabletransfer"/>
  <property name="build.packages" value="${ogsacore.root}/impl/java/build-packages.xml"/>
  <property name="test-reports.dir" value="test-reports"/>
  <property name="jobManager.properties" value="jmDatabase.properties"/>

  <!-- =================================================================== -->
  <!-- Determine what dependencies are present                             -->
  <!-- =================================================================== -->
  <path id="classpath">
    <pathelement location="."/>
    <pathelement location="${java.home}/../lib/tools.jar"/>
    <pathelement location="${build.dest}"/>
    <pathelement location="${ogsacore.root}/impl/java/build/classes"/>
    <fileset dir="lib">
     <include name="*.jar"/>
    </fileset>
    <fileset dir="${ogsacore.root}/impl/java/lib">
     <include name="*.jar"/>
    </fileset>
    <pathelement path="${java.class.path}"/>
  </path>

  <target name="setenv">
    <mkdir dir="${build.dest}"/>
    <mkdir dir="${build.lib}"/>

    <available property="key.present" file="${keystore}" />

    <echo message=" Build environment for ${Name} " />
    <echo message=" Flags (Note: If the {property name} is displayed, "/>
    <echo message="           then the component is not present)" />
    <echo message=""/>
    <echo message=" Property values " />
    <echo message="debug=${debug}" />
    <echo message="deprecation=${deprecation}" />


    <uptodate property="javadoc.notrequired"
              targetfile="${build.javadocs}/index.html">
      <srcfiles dir="${src.dir}" includes="**/*.java" />
    </uptodate>

  </target>

  <!-- =================================================================== -->
  <!-- Generate Service and Binding wsdls from port type wsdls             -->
  <!-- =================================================================== -->

  <!-- =================================================================== -->
  <!-- Generate Stubs from schemas                                         -->
  <!-- =================================================================== -->
  <target name="stubs">
 <copy toDir="${schema.dir}">
    <fileset dir="${schema.origin}" casesensitive="yes"/>
 </copy>
    <echo message=" Generating stubs from ./schema/base/reliable_transfer_service.wsdl" />
    <java classname="org.globus.ogsa.tools.wsdl.GSDL2Java" dir="./schema/base/reliabletransfer" fork="yes"
        classpathref="classpath">
       <sysproperty key="java.protocol.handler.pkgs" 
                 value="org.globus.net.protocol" />
      <arg value="-o"/>  
      <arg value="../../../src"/>  
      <arg value="-Nhttp://www.gridforum.org/namespaces/2002/10/gridServices=org.gridforum.ogsa"/>
      <arg value="reliable_transfer_service.wsdl"/>
    </java>


  </target>


  <!-- =================================================================== -->
  <!-- Compiles the source directory                                       -->
  <!-- =================================================================== -->
  <target name="compile" > <!-- depends="stubs"> -->
    <mkdir dir="${build.dest}" />

    <javac srcdir="${src.dir}" destdir="${build.dest}" debug="${debug}"
      deprecation="${deprecation}"
      classpathref="classpath">
      <exclude name="**/test/*" />
      <exclude name="**/rips/*" />
    </javac>
  </target> 

  <target name="jar" depends="compile">
    <jar jarfile="${build.lib}/${jarname}.jar" basedir="${build.dest}" >
    <!-- ben: warning here if you aren't a .org domain! -->
      <include name="org/**" />
      <include name="*.xml" />
      <include name="*.wsdd" />
    </jar>
  </target>

  <!-- =================================================================== -->
  <!-- Build/Test EVERYTHING from scratch!                                 -->
  <!-- =================================================================== -->
  <target name="all" depends="compile, jar"/>

  <!-- =================================================================== -->
  <!-- Compiles the JUnit testcases -->
  <!-- =================================================================== -->

  <path id="test-classpath">
    <pathelement location="${build.dest}" />
    <path refid="classpath"/>
  </path>

  <target name="buildTest" depends="compile">
    <echo message="junit package found ..."/>
    <!-- Start by building the testcases -->
    <javac srcdir="${src.dir}" destdir="${build.dest}"
           debug="${debug}">
      <classpath>
        <pathelement location="${build.lib}/${name}.jar"/>
        <path refid="test-classpath"/>
      </classpath>
      <include name="**/test/*.java" />
    </javac>
  </target>

  <!-- =================================================================== -->
  <!-- Runs the JUnit package testcases -->
  <!-- =================================================================== -->

  <target name="test" depends="buildTest">

    <antcall target="runNonLiveTests">
      <param name="jvmarg" value="-Dignore=ignore" />
    </antcall>

    <antcall target="runLiveTests">
      <param name="jvmarg" value="-Dignore=ignore" />
    </antcall>

  </target>

  <!-- =================================================================== -->
  <!-- Runs the JUnit package testcases which don't require network access -->
  <!-- =================================================================== -->

  <target name="testNonLive" depends="buildTest">

    <antcall target="runNonLiveTests">
      <param name="jvmarg" value="-Dignore=ignore" />
    </antcall>

  </target>

  <!-- =================================================================== -->
  <!-- Generic tests target - should not be called directly                -->
  <!-- =================================================================== -->

  <target name="runNonLiveTests">

    <mkdir dir="${basedir}/${test-reports.dir}" />
      
    <junit printsummary="yes" haltonfailure="yes" fork="yes">
      <classpath refid="test-classpath" />
      <formatter type="xml" />
      <batchtest todir="${test-reports.dir}">
        <fileset dir="${build.dir}/classes">
          <!-- Convention: each package that's being tested
                has its own test class collecting all the tests -->
          <include name="**/PackageTests.class"/>
          <exclude name="**/databaseAccess/test/*.class"/>
          <!--<exclude name="**/gram/client/test/*.class"/>-->
        </fileset>
      </batchtest>
      <jvmarg value="${jvmarg}" />
    </junit>
  </target>

  <!-- =================================================================== -->
  <!-- Runs the JUnit package testcases which require network access       -->
  <!-- =================================================================== -->

  <target name="testLive" depends="buildTest">

    <antcall target="runLiveTests">
      <param name="jvmarg" value="-Dignore=ignore" />
    </antcall>

  </target>

  <!-- =================================================================== -->
  <!-- DB Access tests target - should not be called directly                -->
  <!-- =================================================================== -->

  <target name="runLiveTests">

    <mkdir dir="${basedir}/${test-reports.dir}" />
      
    <junit printsummary="yes" haltonfailure="yes" fork="yes">
      <classpath refid="test-classpath" />
      <formatter type="xml" />
      <batchtest todir="${test-reports.dir}">
        <fileset dir="${build.dir}/classes">
          <!-- Convention: each package that's being tested
                has its own test class collecting all the tests -->
          <include name="**/databaseAccess/test/PackageTests.class"/>
          <include name="**/gram/client/test/PackageTests.class"/>
        </fileset>
      </batchtest>
      <jvmarg value="${jvmarg}" />
      <jvmarg value="-DjmDatabaseProperties=${jobManager.properties}"/>
    </junit>
  </target>

  <!-- Gar Packaging -->
  <target name="gar" depends="jar">
    <copy todir="${build.lib}">
      <fileset dir="${lib.dir}">
          <include name="**/*.jar"/>
      </fileset>
    </copy>
    <ant antfile="${ogsacore.root}/impl/java/build-packages.xml" target="makeClientServerGar">
    <!-- <ant antfile="${build.packages}" target="makeGar"> -->
      <property name="gar.name" value="${build.lib}/${package.dir}.gar"/>
      <property name="garlib.dir" value="${build.lib}"/>
      <property name="garserverdeployment.file" value="${package.dir}-server-config.wsdd"/>
      <property name="garclientdeployment.file" value="${package.dir}-client-config.wsdd"/>
      <property name="garschema.origin" value="./schema/base/reliabletransfer"/>
      <property name="garschema.path" value="base/reliabletransfer"/>
    </ant>
  </target>

  <!-- =================================================================== -->
  <!-- Cleans everything                                                   -->
  <!-- =================================================================== -->
  <target name="clean">
    <antcall target="cleanBuild"/>
    <delete dir="${test-reports.dir}"/>
    <delete dir="${stubs.dir}"/>
  </target>

  <target name="cleanBuild">
    <delete dir="${build.dir}"/>
  </target>

  <!--
  <property file="build.properties"/>
  <property file="${user.home}/build.properties"/>
  -->

</project>
