#! @SH@
####################################################
# This script will submit a condor request and return information to the GRAM
# job manager about success/failure and status/error code
#
# The following steps are done by the system administrator
#
# 1.) choose a universe
#----------------------
# Vanilla jobs are jobs submitted to Condor which do not use the Condor 
# remote system call or checkpoint services. Any Unix executable or script
# may be submitted to Condor as a vanilla job

condor_universe=vanilla
#condor_universe=standard

# 2.) choose a arch type
#----------------------
#condor_arch=SUN4u
condor_arch=SUN4x

# 3.) choose a operating system type
#----------------------
condor_opsys=SOLARIS251

prefix=@prefix@
exec_prefix=@exec_prefix@
tmpdir=@tmpdir@
localstatedir=@localstatedir@

deploy_prefix=@deploy_prefix@
deploy_sbin=${deploy_prefix}/sbin
deploy_tmp=${deploy_prefix}/tmp

################################################
# Site-specific settings
################################################
condor_submit=@CONDOR_SUBMIT@
grep=@GREP@
awk=@AWK@
rm=@RM@
################################################

arg_file=$1
# check for the argument file if it does not exist
# then return with an error immediately.
if [ ! -f $arg_file ] ; then
   echo GRAM_SCRIPT_ERROR:@GLOBUS_GRAM_CLIENT_ERROR_BAD_SCRIPT_ARG_FILE@
   exit 1
fi

# use the argument file to define all the arguments
. $arg_file

# if a logfile has been passed in then assume debug mode.
if [ $grami_logfile = "/dev/null" ] ; then
    DEBUG_ECHO=:
else
    DEBUG_ECHO=echo
fi

$DEBUG_ECHO "JM_SCRIPT: in condor submit script" >> $grami_logfile

$DEBUG_ECHO ""                                            >> $grami_logfile
$DEBUG_ECHO ============================================  >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: arguments recieved...}"           >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: logfile   = ${grami_logfile}"     >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: directory = ${grami_directory}"   >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: program   = ${grami_program}"     >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: args      = ${grami_args}"        >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: env       = ${grami_env}"         >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: count     = ${grami_count}"       >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: stdin     = ${grami_stdin}"       >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: stdout    = ${grami_stdout}"      >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: stderr    = ${grami_stderr}"      >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: maxtime   = ${grami_maxtime}"     >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: jobtype   = ${grami_jobtype}"     >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: myjob     = ${grami_myjob}"       >> $grami_logfile
$DEBUG_ECHO ""                                            >> $grami_logfile

if [ ${grami_jobtype} = "mpi" ] ; then
   echo "GRAM_SCRIPT_ERROR:@GLOBUS_GRAM_CLIENT_ERROR_MPI_NOT_SUPPORTED@"
   $DEBUG_ECHO "JM_SCRIPT: returning script error: "\
               "@GLOBUS_GRAM_CLIENT_ERROR_MPI_NOT_SUPPORTED@" >> $grami_logfile
   $DEBUG_ECHO "JM_SCRIPT: exiting condor submit script" >> $grami_logfile
   exit 1
fi

createScript () {
    #
    # creates a condor script.
    #
    #
    echo "####################"
    echo "#"
    echo "# description file for condor submision"
    echo "#"
    echo "####################"
    echo ""
    echo "Universe       = ${condor_universe}"
    echo ""
    eval echo "Executable     = ${grami_program}"
    eval echo "Initialdir     = ${grami_directory}"
    echo "Requirements   = OpSys == \"${condor_opsys}\""\
                       " && Arch == \"${condor_arch}\""\
                       " && FileSystemDomain != \"xxx\""
    if test -n "${grami_args}"; then
       eval echo "Arguments      = ${grami_args}"
    fi

    if test -n "${new_grami_env}"; then
       echo "Environment    = ${new_grami_env}"
    fi

    echo ""
    eval echo "Input          = ${grami_stdin}"
    eval echo "Output         = ${grami_stdout}"
    eval echo "Error          = ${grami_stderr}"
    echo ""
    echo "queue ${grami_count}"
    echo ""
}

#in the standard universe directories and files refer to the local machine
#so we can verify them.  If the universe is vanilla then directories and files
#refer to the remote machine (i.e. some machine at U of Wisc)
if [ ${condor_universe} = "standard" ] ; then
   $DEBUG_ECHO "JM_SCRIPT: verifying directory exists">> $grami_logfile
   if [ -d ${grami_directory} ] ; then
      cd ${grami_directory}
   else
      $DEBUG_ECHO "JM_SCRIPT: directory DOES NOT exist, exiting with 1"\
               >> $grami_logfile
      echo "GRAM_SCRIPT_ERROR:@GLOBUS_GRAM_CLIENT_ERROR_BAD_DIRECTORY@"
      exit
   fi

   $DEBUG_ECHO "JM_SCRIPT: verifying stdin">> $grami_logfile
   if [ ! -r ${grami_stdin} ] ; then
       #stdin file is not readable by this process
      echo "GRAM_SCRIPT_ERROR:@GLOBUS_GRAM_CLIENT_ERROR_STDIN_NOTFOUND@"
      exit
   fi
fi

$DEBUG_ECHO "JM_SCRIPT: checking environment">> $grami_logfile
new_grami_env=""

#
#loop through all the environment variables.  Variables and values are seperate
#arguments.  While assembling var/value pairs add the specific syntax 
#required for this scheduling system.
#
if [ ! -z "${grami_env}" ] ; then
   eval set -- ${grami_env}
   x=0
   while [ "$#" -ne 0 ]; do
       if [ $x = 0 ] ; then
          new_grami_env="${new_grami_env}$1"
          x=1
       else
          x=0
          new_grami_env="${new_grami_env}=$1;"
       fi

       shift
   done
fi

$DEBUG_ECHO "JM_SCRIPT: condor environment = "\
                "${new_grami_env}" >> $grami_logfile

condor_file=${deploy_tmp}/condor_script.description.$$
createScript >$condor_file

$DEBUG_ECHO "JM_SCRIPT: testing successful creation of the submit"\
            " description file created.">> $grami_logfile
#
#test if the file exists and is writable.
if [ ! -w "${condor_file}" ] ; then
   $DEBUG_ECHO "JM_SCRIPT: creation of the submit description file "\
               "${condor_file} FAILED" >> $grami_logfile
   echo "GRAM_SCRIPT_ERROR:@GLOBUS_GRAM_CLIENT_ERROR_TEMP_SCRIPT_FILE_FAILED@"
fi

#
#  grep for Proc line which will contain the ID that the calling 
#  program requires in order to cancel the job.
#
#  the proc line will look like this "Proc 45.0:"
#  we want to return "45" from this line.
#
status=`${condor_submit} $condor_file | ${grep} "submitted to cluster" | ${awk} '{print $6}' | ${awk} -F. '{print $1; exit;}'`

if test -n "${status}"; then
   $DEBUG_ECHO "JM_SCRIPT: returning job state: "\
               "@GLOBUS_GRAM_CLIENT_JOB_STATE_PENDING@" >> $grami_logfile
   echo "GRAM_SCRIPT_SUCCESS:@GLOBUS_GRAM_CLIENT_JOB_STATE_PENDING@"
else
   $DEBUG_ECHO "##############################" >> $grami_logfile
   $DEBUG_ECHO "JM_SCRIPT: returning script error: "\
               "@GLOBUS_GRAM_CLIENT_ERROR_JOB_EXECUTION_FAILED@" >> $grami_logfile
   $DEBUG_ECHO "JM_SCRIPT: unknown response from condor_submit!"\
               >> $grami_logfile
   $DEBUG_ECHO "##############################" >> $grami_logfile
   echo "GRAM_SCRIPT_ERROR:@GLOBUS_GRAM_CLIENT_ERROR_JOB_EXECUTION_FAILED@"
fi

${rm} $condor_file

# write the job_id to the argument file.  This is used by any subsequent
# grami_jm_shell routines.  I.E. condor poll script -or- condor rm script
echo "grami_job_id=\"$status\"" >> $arg_file

$DEBUG_ECHO "JM_SCRIPT: exiting condor submit script" >> $grami_logfile
