#! @SH@

# This is a simple shell script that acts like 
# the hostname command.  But is returns the FQN
# in all cases.

PROGRAM_NAME=`echo $0 | ${GLOBUS_SH_SED-sed} -e 's|.*/||g'`
PROGRAM_VERSION=`echo '$Revision$' | ${GLOBUS_SH_CUT-cut} -d' ' -f2`

short_usage="${PROGRAM_NAME} [-help] [-version]"

long_usage()
{
   ${GLOBUS_SH_CAT-cat} 1>&2 <<EOF

${short_usage}

    globus-hostname returns the system hostname and makes some
    additional checks to ensure a fully qualified hostname.

    Setting the environment variable GLOBUS_HOSTNAME will cause
    globus-hostname to return that value instead. This is useful for
    specifying the use of certain network interfaces when
    communicating etc.

EOF
}

# Inserted by configure.
@globus_script_initializer@
@globus_args_parser_header@

if [ -n "$1" ]; then
    globus_args_unrecognized_option "$1"
fi
 
globus_hostname=""		# Replaced by deploy

if [ -n "${globus_hostname}" ]; then
    echo "${globus_hostname}"
    exit 0
fi

LOCALDOMAIN=@LOCALDOMAIN@
 
if [ -x ${libexecdir}/globus-libc-hostname ]; then
    FULLNAME="`${libexecdir}/globus-libc-hostname`"
    # make sure command ran successfully
    if [ ! $? = 0 ]
    then
       FULLNAME=`@SYS_HOSTNAME@`
    fi
else
    FULLNAME=`@SYS_HOSTNAME@`
fi
    BASENAME=`@SYS_HOSTNAME@ | ${GLOBUS_SH_CUT-cut} -d. -f1`
 
if [ "X$FULLNAME" = "X$BASENAME" ] ; then
# Its not fully qualified
    GLOBUS_HOSTNAME="${BASENAME}.${LOCALDOMAIN}"
else
    GLOBUS_HOSTNAME="$FULLNAME"
fi

GLOBUS_HOSTNAME="`echo $GLOBUS_HOSTNAME | ${GLOBUS_SH_TR-tr} 'A-Z' 'a-z'`"
echo $GLOBUS_HOSTNAME
export GLOBUS_HOSTNAME
