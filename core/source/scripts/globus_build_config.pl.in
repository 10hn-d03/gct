#! @PERL@ -w
use strict;

my ($rawldflags, @deppackages, $flavor);

my $prefix = $ENV{'GLOBUS_INSTALL_PATH'};

if (!defined($prefix)) {
  die "Please set GLOBUS_INSTALL_PATH\n";
}



for (@ARGV) {
  if (/^--ldflags=(.+)$/) {
    $rawldflags=$1;
  } elsif (/^--flavor=(\w+)/) {
    $flavor=$1;
  } else {
    push @deppackages, $_;
  }
}

if (!defined($flavor)) {
  print "ERROR: Need to specify flavor\n";
  usage();
}

if (!defined($rawldflags)) {
  $rawldflags="";
}
# remove leading space
$rawldflags =~ s/^\s*//g;


for (@deppackages) {
  scan_package($_);
}

$rawldflags =~ s/-L\s*/-L/g;
$rawldflags =~ s/-l\s*/-l/g;
#print "$rawldflags\n";
my @flaglist = split /\s+/, $rawldflags;
my (%lib_dir_map, @libs_reversed, $currentlib_dir);

for (@flaglist) {
  my $lib;
  if (/(-l(?:\w+|\$\(\w+\))+)/) {
    $lib = $1;
    unshift @libs_reversed, $1;
    if (defined($currentlib_dir)) {
      $lib_dir_map{$lib} = $currentlib_dir;
    }
  }

  if (/(-L(?:\w+|\$\(\w+\)|\/)+)/) {
   $currentlib_dir = $1;
  }
}


my $resulting_libline = "";
$currentlib_dir = "";
my %added_libs;

for (@libs_reversed) {
  my  $add_libdir = "";

  next if (defined($added_libs{$_}));

  if (defined($lib_dir_map{$_})) {
    if ($lib_dir_map{$_} ne $currentlib_dir) {
      $add_libdir = $currentlib_dir;
      $currentlib_dir = $lib_dir_map{$_};
    }    
  }

  $resulting_libline = "$_ $add_libdir $resulting_libline";
  $added_libs{$_} = 1;
}

$resulting_libline = "$currentlib_dir $resulting_libline";

print "$resulting_libline\n";

my %scanned_packages;

sub scan_package
  {
    my $package= shift;

    if (defined($scanned_packages{$package})) {
      return;
    }

    my @deps;
    my $parameter_filename = 
      "$prefix/etc/globus_packages/$package/build_parameters_$flavor";

    if (! -f $parameter_filename ) {
      die "Error: missing file $parameter_filename. $package does not seem to be installed for flavor $flavor\n";  
    }

    open(PARAMETERS, $parameter_filename) || die "Error: $parameter_filename could not be opened\n";

    # Look for the lines specifying the dependent packages and the libraries
    while (<PARAMETERS>) {
      if (/_libraries=(.+)$/) {
	my $libline = $1;
	#eliminate quotes
	$libline =~ s/[\"\']//g;
	$rawldflags .= " $libline";
      }
      if (/_requires_build=(.+)$/) {
	my $depsline=$1;
	# remove leading specs
	$depsline =~ s/^\s*//g;
	# remove quotes
	$depsline =~ s/[\"\']//g;
	@deps = split /\s+/, $depsline;
      }
    }
    close(PARAMETERS);

    # register the package as scanned
    $scanned_packages{$package} = 1;

    for (@deps) {
      scan_package($_);
    }
  }


sub usage {
  print "globus_build_config \[--ldflags=\"<extra ld flags>\"\] --flavor=<globus_flavor_name> <dependent packages list>\n";
}

__END__

=head1 NAME

B<globus_build_config.pl> - Returns a minimized list of ldflags from a list of globus packages and external libraries.

=head1 SYNOPSIS

globus_build_config.pl  [--ldflags="<extra ld flags>"] --flavor=<globus_flavor_name> <dependent packages list>

=head1 DESCRIPTION

B<globus_build_config.pl> returns a list of ldflags.  It builds this
list from the ld flags passed in as well as from scanning the
build_dependencies file of each package passed in as a dependency.
This scanning is done recursively to cover the entire dependency tree.
This script is based on the shell script gnome_config.

=head1 LINK ORDER

The flag list returned by B<globus_build_config.pl> is assembled in
dependent order.  A dependency between two libraries occurs when one
library needs the symbols of another library in order to link
correctly.  For most linkers the library providing the symbols has to
be linked after the library that needs the symbols.  For
example, from the line:

   -L/opt/Xpm/lib -lXpm -L/usr/lib/X11 -lXm -lX

B<globus_build_config.pl> assumes that the library Xpm is dependent on Xm which in turn is dependent on X.  In addition, B<globus_build_config.pl> assumes that Xpm is located in /opt/Xpm/lib and Xm and X are both located in /usr/lib/X11.

=head1 MINIMIZATION

B<globus_build_config.pl> makes sure that every library is listed only once.  The purpose of this is to reduce the size of the linking command and make the linking behavior more predictable.  Here is an example of minimization:

     Before: -lm -L/home/mystuff/lib -lXm -L$(GLOBUS_INSTALL_PATH)/lib \
-lfum_$(GLOBUS_FLAVOR_NAME) -lm -L/opt/dum/lib -ldee \
-L$(GLOBUS_INSTALL_PATH)/lib -lfoo_$(GLOBUS_FLAVOR_NAME) -lm -L/usr/local/lib \
-lX -L$(GLOBUS_INSTALL_PATH)/lib -lfee_$(GLOBUS_FLAVOR_NAME) -lm -L/opt/dum/lib \
-ldum

     After: -L/home/mystuff/lib -lXm -L$(GLOBUS_INSTALL_PATH)/lib \
-lfum_$(GLOBUS_FLAVOR_NAME) -L/opt/dum/lib -ldee -L$(GLOBUS_INSTALL_PATH)/lib \
-lfoo_$(GLOBUS_FLAVOR_NAME) -L/usr/local/lib -lX -L$(GLOBUS_INSTALL_PATH)/lib \
-lfee_$(GLOBUS_FLAVOR_NAME)  -lm -L/opt/dum/lib -ldum

Notice that in the After, -lm is listed only once near the end of the list.

=head1 BUGS

Circular dependencies between libraries are not supported.  These
dependencies are usually resolved by listing one of the libraries
before and after its co-dependent library (ie. -lfoo -lfee -lfoo).
B<globus_build_config.pl> will eliminate the first -lfoo because of
minimization.


=head1 AUTHOR

Michael Bletzinger E<lt>mbletzin.ncsa.uiuc.eduE<gt> and Eric Blau
E<lt>eblau.ncsa.uiuc.eduE<gt>

=cut
